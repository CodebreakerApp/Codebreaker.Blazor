@inherits LayoutComponentBase
@inject IStringLocalizer<Resource> Loc
@inject NavigationManager NavigationManager

<div class="layout">
    <div class="header-wrapper">
        <FluentHeader>
            <h1><span id="welcome-message">@Loc["Index_Welcome"]</span> @Loc["AppDisplayName"]</h1>
            <FluentSpacer />
            <LoginDisplay />
        </FluentHeader>
    </div>
    <div class="main-layout-stack">
        @* Desktop navigation *@
        <div class="large-navigation">
            <FluentNavMenu Width="200" Style="box-shadow: var(--elevation-shadow-card-rest); height: 100%;">
                @foreach (var navigationItem in _navigationItems)
                {
                    <FluentNavLink Href="@navigationItem.Href" Match="@(navigationItem.MatchAll ? NavLinkMatch.All : NavLinkMatch.Prefix)" Icon="@navigationItem.Icon">@navigationItem.Title</FluentNavLink>
                }
            </FluentNavMenu>
        </div>

        @* Mobile navigation *@
        <div class="small-navigation">
            <FluentButton Id="mobile-nav-menu-button" Appearance="Appearance.Stealth" OnClick="ToggleMobileNavMenu" IconStart="@(new Icons.Regular.Size20.Navigation())">
                @Loc["NavMenu_Title"]
            </FluentButton>
            <FluentMenu @bind-Open="_isMobileNavMenuOpen" UseMenuService="true" Anchor="mobile-nav-menu-button">
                @foreach (var navigationItem in _navigationItems)
                {
                    <FluentMenuItem Label="@navigationItem.Title" OnClick="() => Navigate(navigationItem)">
                        <FluentIcon Value="@navigationItem.Icon" Slot="start" />
                    </FluentMenuItem>
                }
            </FluentMenu>
        </div>

        <div class="body-content">
            @Body
            <FluentDialogProvider />
        </div>
    </div>
</div>

<FluentDialogProvider />
<FluentMenuProvider />

@code {
    private record class NavigationItem(string Title, Icon Icon, string Href, bool MatchAll = false);

    private bool _isMobileNavMenuOpen = false;
    private void ToggleMobileNavMenu() =>
        _isMobileNavMenuOpen = !_isMobileNavMenuOpen;
    private IEnumerable<NavigationItem> _navigationItems = null!;

    protected override void OnInitialized()
    {
        _navigationItems = [
            new NavigationItem(Loc["NavMenu_Home_Title"], new Icons.Regular.Size20.Home(), "/", true),
            new NavigationItem(Loc["NavMenu_Game_Title"], new Icons.Regular.Size20.BoardGames(), "/game"),
            new NavigationItem(Loc["NavMenu_Reports_Title"], new Icons.Regular.Size20.DataBarHorizontal(), "/reports"),
            new NavigationItem(Loc["NavMenu_About_Title"], new Icons.Regular.Size20.Info(), "/about")
        ];
    }

    private void Navigate(NavigationItem navigationItem) =>
        NavigationManager.NavigateTo(navigationItem.Href);
}
