@page "/game"
@using CodeBreaker.Blazor.Components

<h2>Game @Game?.Type.Name</h2>

@*<PageMessages Messages="_pageMessageService.Messages" />*@

@if (GameStatus == GameMode.NotRunning)
{
    <div class="flex start-game-container">
        <CodeBreakerTextField CssClass="flex-1" @bind-Value="Name" Label="Enter your gamername" Required="true" RequiredError="The name is required" MaxLength="100" />
        <CodeBreakerRadioGroup @bind-Value="_selectedGameType" Items="_gameTypes"></CodeBreakerRadioGroup>
        @*TODO: switch to Form *@
        <CodeBreakerButton Disabled="@(String.IsNullOrWhiteSpace(Name) || String.IsNullOrWhiteSpace(_selectedGameType))" OnClick="async () => await StartGameAsync()">
            @if (InProgress)
            {
                <div class="button-slot-start">
                    <CodeBreakerProgressCircular />
                </div>
            }
            Start the game
        </CodeBreakerButton>
    </div>
}
else if (GameStatus is GameMode.Started or GameMode.MoveSet)
{
    <div class="container">
        <div class="numbers">
            @for (int i = _maxMoves; i > 0; i--) {
                <div class="move-number">@i</div>
            }
        </div>
        <div class="game-container">
            @for (int i = OpenMoves; i > 0; i--)
            {
                <div class="@(i == 1 ? "game-row selectable": "game-row")">
                    @for(int y = 0; y < Game.Value.Type.Holes; y++) {
                        var localVariable = y;
                        <div class="@(i == 1 ? _currentMove[localVariable].Item2 : "")" @onclick="() => SelectField(localVariable)"></div>
                    }
                    @if (i == 1)
                    {
                        <div>
                            <CodeBreakerIconButton
                               OnClick="async () => await SetMoveAsync()"></CodeBreakerIconButton>
                        </div>
                    }
                    else
                    {
                        <div class="key-pegs"></div>
                    }
                </div>
            }
            @foreach (var (index, move) in GameMoves.Reverse().Select((move, i) => (i, move)))
            {
                <div class="game-move">
                    @foreach (var guess in move.GuessPegs)
                    {

                        <div class="@(guess.ToLower())"></div>
                    }
                    <div class="key-pegs">
                        @for (int y = 0; y < move.KeyPegs.Black; y++)
                        {
                            <div class="black">
                            </div>
                        }
                        @for (int y = 0; y < move.KeyPegs.White; y++)
                        {
                            <div class="white">
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="colors">
            @foreach (string colorField in Game?.Type.Fields ?? Array.Empty<string>())
            {
                <div class="@(_selectable ? $"{colorField.ToLower()} selectable": colorField.ToLower())"
             @onclick="() => SelectColor(colorField)">
                    @colorField[0]
                </div>
            }
        </div>
    </div>
}
