@*<MudGrid>
    <MudItem xs="12" md="9">
        <MudGrid>
        @for (int i = 0; i < SelectionFields.Length; i++)
        {
            int localI = i;
            <MudItem Style="min-width: 200px">
                <MudSelect Label="@GetLabel(localI)" @bind-Value="SelectionFields[localI]" Style="width: 100%">
                @foreach (string colorField in AvailableColors)
                {
                    <MudSelectItem Value="@colorField">@colorField</MudSelectItem>
                }
                </MudSelect>
            </MudItem>
        }
        </MudGrid>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudButton @onclick="async () => await SetMoveAsync()" Disabled="!CanSetMove">
            @if (InProgress)
            {
                <div class="button-slot-start">
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                </div>
            }
            Make move
        </MudButton>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public bool InProgress { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<Task> SetMoveAsync { get; set; }

    [Parameter]
    [EditorRequired]
    public string?[] SelectionFields { get; set; } = Array.Empty<string?>();

    [Parameter]
    [EditorRequired]
    public IEnumerable<string> AvailableColors { get; set; } = Array.Empty<string>();

    private string GetLabel(int i) =>
        $"Peg {i+1}";

    public bool CanSetMove =>
        SelectionFields.All(x => x is not null);
}
*@
