@page "/report"
@using CodeBreaker.Shared
@inject CodebreakerAPIClient Client
@inject ILoggerFactory LoggerFactory

<h3>Report</h3>

<label>Select the date:
    <input type="date" @bind="date" />
</label>
<br />
<label>Detail?
    <input type="checkbox" @bind="requestDetail" />
</label>


<br />
<input type="button" value="Submit" @onclick="async () => await GetReport()" />

@if (detail is null)
{
    <div>get detail data here</div>
}
else 
{

<table class="table">
    <thead>
        <tr>
            <th>User</th>
            <th>Id</th>
            <th>Code</th>
            <th>Time</th>
            <th>Moves</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var game in detail.Games)
        {
            <tr>
                <td>@game.User</td>
                <td>@game.CodeBreakerGameId</td>
                <td>@game.Code</td>
                <td>@game.Time</td>
                <td>
                    <table class="table">
                        <tr>
                            <th>Number</th>
                            <th>Choice</th>
                            <th>Key Pegs</th>
                        </tr>
                        <tbody>
                            @foreach (var move in game.Moves)
                            {
                                <tr>
                                    <td>@move.MoveNumber</td>
                                    <td>@move.Moves</td>
                                    <td>@move.Keys</td>
                               </tr>
                            }
                        </tbody>
                    </table>

                </td>

            </tr>
            
        }
    </tbody>
</table>
}

@if (infoList == null)
{
    <div>get data here</div>
}
else 
{
<table class="table">
    <thead>
        <tr>
            <th>User</th>
            <th>Time</th>
            <th>Number moves</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var info in infoList)
        {
            <tr>
                <td>@info.User</td>
                <td>@info.Time</td>
                <td>@info.NumberMoves</td>
            </tr>
        }
    </tbody>
</table>
}



@code {
    private ILogger? logger;
    private DateTime date = DateTime.Today;
    private bool requestDetail = false;
    private GamesInformationDetail? detail;
    private IEnumerable<GamesInfo>? infoList;

    protected override void OnInitialized()
    {
        logger = LoggerFactory.CreateLogger<CodeBreakerReport>();
    }

    public async Task GetReport()
    {
        logger?.LogInformation("Calling GetReport for {date}", date);
        
        detail = null;
        infoList = null;
        try
        {
            if (requestDetail)
            {
                detail = await Client.GetDetailedReportAsync(date);
            }
            else
            {
                infoList = await Client.GetReportAsync(date);
            }

        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Error calling GetReport");
            throw;
        }
    }
}
