@page "/report"
@using CodeBreaker.Shared
@inject CodebreakerAPIClient Client
@inject ILoggerFactory LoggerFactory

<h3>Report</h3>

<label>Select the date:
    <input type="date" @bind="date" />
</label>
<br />

<input type="button" value="Submit" @onclick="async () => await GetReport()" />


@if (infoList is not null)
{
<table class="table">
    <thead>
        <tr>
            <th>User</th>
            <th>Time</th>
            <th>Number moves</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var info in infoList)
        {
            <tr>
                <td>@info.User</td>
                <td>@info.Time</td>
                <td>@info.NumberMoves</td>
                <td><input type="button" value="Details" @onclick="async () => await GetDetail(info.Id)"/></td>
            </tr>
        }
    </tbody>
</table>
}

@if (game is not null)
{    
    <table class="table">
    <thead>
        <tr>
            <th>User</th>
            <th>Id</th>
            <th>Code</th>
            <th>Time</th>
            <th>Moves</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@game.User</td>
            <td>@game.CodeBreakerGameId</td>       
            <td>@game.Code</td>
            <td>@game.Time</td>
            
            <td>
                 <table class="table">
                        <tr>
                            <th>Number</th>
                            <th>Choice</th>
                            <th>Key Pegs</th>
                        </tr>
                        <tbody>
                            @foreach (var move in game.Moves)
                            {
                                <tr>
                                    <td>@move.MoveNumber</td>
                                    <td>@move.Moves</td>
                                    <td>@move.Keys</td>
                               </tr>
                            }
                        </tbody>
                    </table>

            </td>
        </tr>

    </tbody>
</table>
}


@code {
    private ILogger? logger;
    private DateTime date = DateTime.Today;
    private IEnumerable<GamesInfo>? infoList;
    private CodeBreakerGame? game;

    protected override void OnInitialized()
    {
        logger = LoggerFactory.CreateLogger<CodeBreakerReport>();
    }

    public async Task GetReport()
    {
        logger?.LogInformation("Calling GetReport for {date}", date);

        infoList = null;
        try
        {
            infoList = await Client.GetReportAsync(date);
        }
        catch (Exception ex)
        {
            logger?.LogError(ex, "Error calling GetReport");
            throw;
        }
    }

    public async Task GetDetail(string id)
    {
        logger?.LogInformation("Calling GetDetail for {id}", id);

        try
        {
            game = await Client.GetDetailedReportAsync(id);
        }   
        catch (Exception ex)
        {
            logger?.LogError(ex, "Error calling GetDetail");
            throw;
        } 

    }
}
